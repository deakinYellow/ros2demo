cmake_minimum_required(VERSION 3.5)
set( PROJECT_NAME "pcl_ros" )
project(${PROJECT_NAME})

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(pcl_conversions REQUIRED)

find_package(Boost COMPONENTS system REQUIRED)
find_package(PCL COMPONENTS common REQUIRED)


if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # remove the line when a copyright and license is present in all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # remove the line when this package is a git repo
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

add_executable( talker src/talker.cpp)
ament_target_dependencies( talker rclcpp std_msgs)

add_executable( listener src/listener.cpp)
ament_target_dependencies( listener rclcpp std_msgs)


#--------------link---------------------------------------
add_executable( pointcloud2_pub src/generate_pointcloud2.cc )
ament_target_dependencies( pointcloud2_pub
    "rclcpp std_msgs"
    "sensor_msgs"
    "tf2_geometry_msgs"
    "pcl_conversions"
    )
target_link_libraries( pointcloud2_pub
  ${Boost_SYSTEM_LIBRARY}  # pcl_conversions requires this
  ${PCL_LIBRARIES}
)
#--------------link---------------------------------------

install(TARGETS
  talker
  listener
  pointcloud2_pub
  DESTINATION lib/${PROJECT_NAME}
  )

ament_package()







